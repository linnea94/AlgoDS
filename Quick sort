//
//
//

public class Program
	{
		// För att testa implementationen av koden.
		// En ny array deklareras. 
		// SortMetoden kallas, arrayen passas som en parameter
		//  Skriver ut arrayen men ett valt tecken som mellanrum

		public static void Main(string[] args)

			{
				int[] integerValues = {-11, 12, -42, 0, 1, 90, 68, 6, -9};
				QuickSort.Sort(integerValues);
				Console.WriteLine(string.Join(" | ", integerValues)); 
			}

	}

public static class QuickSort
//Innehåller två varianter av sort-metoden. 
//Den här första tar bara en parameter, nämligen arrayen som ska sorteras.
{
  public static void Sort<T>(T[] array) where T : IComparable
  {
    Sort(array, 0, array.Length-1);
  }
  
  //Den andra varianten av sortmetodengör det möjligt att specificera de lägre och övre index som indikerar vilken 
  // del av arrayen som ska sorteras. 
  // Sortmetoden kollar om arrayen eller subarrayen har minst två element genom att jämföra värdena i lower och upper
  // I det fallet kallar den på Partition-metoden, som är ansvarig för att dela, och sedan kallas sort-metoden rekursivt 
  // för två sub-arrayer, nämligen lower, index från nedre till P och högre från P plis en till övre. 
  
  private static void Sort<T>(T[]array, int lower, int upper) where T : IComparable
  {
    if (lower < upper)
    {
      int p = Partition(array, lower, upper);
      Sort(array, lower, p);
      Sort(array, p+1, upper);
    }
  }
  
  //Nedan följer koden för Partition. 
  //I början är pivotvärdet valt och lagras som ett värde av pivot variabeln. 
  //Sedan används do-while-loopen. Oklart vad som händer sen. 
  
  private static int Partition<T>(T[] array, int lower, int upper) where T : IComparable
  {
    int i = lower; 
    int j = upper; 
    T pivot = array[lower];
    //T pivot = array[(lower + upper) / 2 ];
    do
    {
      while (array[i].CompareTo(pivot) < 0) {i++;}
      while (array[j].CompareTo(pivot) > 0 {j--;}
      if (i>=j) {break;}
      Swap(array, i, j); 
    }
    while (i <= j);
    return j; 
  }
  
}
